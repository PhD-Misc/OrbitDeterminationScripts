#!/usr/bin/python
from __future__ import print_function, division
import csv
from argparse import ArgumentParser
import numpy as np
from datetime import datetime, timedelta
from skyfield.api import Topos, load, EarthSatellite
from astropy.io import fits
from astropy.wcs import WCS
from scipy.optimize import minimize, basinhopping, curve_fit
import matplotlib.pyplot as plt
import yaml
from scipy.stats import chisquare
from tqdm import tqdm

def str2datetime(str_date):
    """
    converts string datetime to datetime object (two possible formats)
    """

    try:
        UT = datetime.strptime(str_date, '%Y-%m-%d %H:%M:%S')

    except:
        UT = datetime.strptime(str_date, '%Y-%m-%d %H:%M:%S.%f')

    return UT

def getInitialGuess(cfg):
    """
    parse the yaml file and output the relevant orbital elements
    """
    output = cfg["initialGuess"]["i"], cfg["initialGuess"]["ra"], cfg["initialGuess"]["e"], \
        cfg["initialGuess"]["aop"], cfg["initialGuess"]["ma"], cfg["initialGuess"]["mm"]

    return output

def samplerFunc(x, y):
    """
    function used to calculate the uncertainities related to the orbit determination. The 
    reason std = 0.1673069083143987 is explained in the paper (equals 5% of the PSF FWHM)
    """
    s1 = np.random.normal(x, 0.1673069083143987, 100) ## sigma is 5% of FWHB
    s2 = np.random.normal(y, 0.1673069083143987, 100) ## sigma is 5% of FWHB

    return np.random.choice(s1, 1)[0], np.random.choice(s2, 1)[0]



def createTsTimeVector(utc_array):
    """
    create skyfield datetime object from datetime time object
    """
    year_array, month_array, day_array, hour_array, minute_array, second_array = [], [], [], [] ,[] ,[]

    for utc in utc_array:

        start_utc = str2datetime(utc)
        start_date, start_time = str(start_utc).split(" ")
        start_year, start_month, start_day = start_date.split("-")
        start_hour, start_minute, start_second = start_time.split(":")
        year_array.append(int(start_year))
        month_array.append(int(start_month))
        day_array.append(int(start_day))
        hour_array.append(int(start_hour))
        minute_array.append(int(start_minute))
        second_array.append(float(start_second))

    times = ts.utc(year_array, month_array, day_array, hour_array, minute_array, second_array)

    return times



def constructTLE(i, ra, e, aop, ma, mm, sid):
    """
    convert orbital elements and noradid into tle format
    """

    ## note that curve_fit/basinhopping can acidentally create negative
    ## values for orbital elements. The below section wraps it arround
    ## to a positive value

    if ra < 0:
        print("updating ra {}".format(ra))
        ra += 360
    
    if aop < 0:
        print("updating aop {}".format(aop))
        aop += 360

    if ma < 0:
        print("updating ma {}".format(ma))
        ma += 360

    line_template_part1 = "2 " + str(sid).ljust(5) + " "
    line_template_part2 = str("%08.4f" %i) + " " + str("%08.4f" %ra) +\
     " " +  str(str("%09.7f" %e).split(".")[1]) + " " + str("%08.4f" %aop) \
     + " " + str("%08.4f" %ma) + " " + str("%011.8f" %mm)  + "14849"
    line_template_part3 = sumCheck(line_template_part1 + line_template_part2)

    tle = line_template_part1 + line_template_part2 + line_template_part3

    return tle


def sumCheck(digit):
    """
    sum check for tle line 2 (used to account for missing bits during transmission)
    """

    digit = digit.replace("-", "1")    
    a = sum(int(x) for x in digit if x.isdigit())

    return str(a%10)

def daysOfYear(utc):
    """
    calculate day of year from datetime object (used in tle line 1)
    """
    time_delta = str2datetime(str(utc)) - str2datetime("2016-01-01 00:00:00")
    return time_delta.total_seconds()/(24.0*60*60) + 1


def fine_range_mean_anomaly_using_time_elapsed(cfg, utc):
    """
    calculate mean anomaly using the equation from paper.
    """

    prev_ma = float(cfg["tle"]["line3"][43:51])
    prev_mm = float(cfg["tle"]["line3"][52:63])
    prev_doy = float(cfg["tle"]["line2"][20:32])

    degrees_elapsed = (daysOfYear(utc) - prev_doy)*prev_mm*360 + prev_ma

    while degrees_elapsed > 360:
        degrees_elapsed -= 360

    while degrees_elapsed  < 0:
        degrees_elapsed += 360
    
    return degrees_elapsed


def updateTLE_LINE2(old_line2, utc_array):
    """
    update tle line2 with the new day of year epoch
    """

    start_utc = str2datetime(utc_array[0])
    end_utc = str2datetime(utc_array[-1])

    deltaTime = (end_utc - start_utc).total_seconds()
    observation_epoch = daysOfYear(start_utc + timedelta(seconds=deltaTime/2.0))

    line2_part1 = old_line2[0:20]
    line2_part2 = "{:12.08f}".format(observation_epoch)
    line2_part3 = old_line2[32:-1]
    temp = line2_part1 + line2_part2 + line2_part3
    line2 = temp + sumCheck(temp)

    return line2, start_utc + timedelta(seconds=deltaTime/2.0)



def getSatXY(line1, line2, line3, time_vector):
    """
    propogate tle elements to epoch and determine the x,y position using wcs object
    """

    sat = EarthSatellite(line2, line3)
    sat.at(time_vector)
    difference = sat - mwa
    topocentric = difference.at(time_vector)
    ra, dec, distance = topocentric.radec()
    ra = np.degrees(ra.radians)
    dec = np.degrees(dec.radians)
    pix_coords = wcs.all_world2pix(np.array([ra, dec]).T, 1)

    px, py = pix_coords.T

    return px, py


def readDetectionFile(args,sampler=False):
    """
    extract the x, y and time information from the csv file
    """
    t_x_array, t_y_array, t_utc_array = [], [], []
    with open(str(args.noradid) + "_extracted_mc_data_from_" + str(args.obs) + ".csv") as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=",")
        for row in csv_reader:
            x, y, ra, dec, utc, t = row[0], row[1], row[2], row[3], row[4], row[5]
            if x == "x":
                continue
            else:
                ## if sample = True, we are bootstraping to determine uncertainities
                if sampler:
                    x, y = samplerFunc(float(x), float(y))
                
                utc_temp = str2datetime(utc)
                utc = utc_temp + timedelta(seconds=-1)
                t_x_array.append(float(x))
                t_y_array.append(float(y))
                t_utc_array.append(str(utc))

    return t_x_array, t_y_array, t_utc_array


def orbitDetermination(cfg, bootstrap=False):
    """
    does orbit determination
    """
    
    ## load angular position measurements
    x_array, y_array, utc_array = readDetectionFile(args, sampler=bootstrap)
    time_vector = createTsTimeVector(utc_array)

    ## load intial guess
    guess_i, guess_ra, guess_e, guess_aop, guess_ma, guess_mm = getInitialGuess(cfg)

    ## determine the current day of year for observation and determine an approx. mean anomaly
    old_line2 = cfg["tle"]["line2"]
    new_line2, epoch_for_ma = updateTLE_LINE2(old_line2, utc_array)
    guess_ma = fine_range_mean_anomaly_using_time_elapsed(cfg, epoch_for_ma)
    line3 = constructTLE(guess_i, guess_ra, guess_e, guess_aop, guess_ma, guess_mm, args.noradid)
    
    ## define boundary limits
    i_min, i_max = cfg['minLimits']['i'], cfg['maxLimits']['i']
    ra_min, ra_max = cfg['minLimits']['ra'], cfg['maxLimits']['ra']
    aop_min, aop_max = cfg['minLimits']['aop'], cfg['maxLimits']['aop']
    ma_min, ma_max = (guess_ma - 4), (guess_ma + 4)
    e_min, e_max = cfg['minLimits']['e'], cfg['maxLimits']['e']
    mm_min, mm_max = cfg['minLimits']['mm'], cfg['maxLimits']['mm']

    constr = ({'type': 'ineq',
                'fun': lambda x: x[0] - aop_min},
                {'type': 'ineq',
                'fun': lambda x: aop_max -x[0]},
                {'type': 'ineq',
                'fun': lambda x: x[1] - ra_min},
                {'type': 'ineq',
                'fun': lambda x: ra_max - x[1]},
                {'type': 'ineq',
                'fun': lambda x: x[2] - ma_min},
                {'type': 'ineq',
                'fun': lambda x: ma_max - x[2]})

    minimizer_kwargs = {"method":"COBYLA", 
                         "constraints": constr, 
                         'options': ({'maxiter': cfg['niter']['minor']})}

    def accept_test(f_new, x_new, f_old, x_old):
        output = True
        aop, ra, ma = x_new
        if aop < aop_min or aop > aop_max:
            output = False
        if ra < ra_min or ra > ra_max:
            output = False
        if ma < ma_min or ma > ma_max:
            output = False

        return output

    def func_2_minimise(i, ra, e, aop, ma, mm):

        line3 = constructTLE(i, ra, e, aop, ma, mm, noradid)
        loc_x_array, loc_y_array = getSatXY("sat" ,new_line2, line3, time_vector)
        #observation = list(loc_x_array) + list(loc_y_array)
        #expected = x_array + y_array
        #offset, _ =  chisquare(observation, expected)

        offset = np.mean((loc_x_array - x_array)**2 + (loc_y_array - y_array)**2)
        #n = 2*len(x_array)
        #offset = np.sqrt(1/n*np.sum((loc_x_array - x_array)**2 + (loc_y_array - y_array)**2))

        return offset



    def function_wraper2(x):

        aop , ra, ma = x
    
        return func_2_minimise(guess_i, ra, guess_e, aop, ma, guess_mm)


    result = basinhopping(function_wraper2, x0=(guess_aop, guess_ra, guess_ma), niter=cfg["niter"]["major"],
            minimizer_kwargs=minimizer_kwargs,
            accept_test=accept_test)

    ## basinhopping for orb elements with large dynamic change (3 of the 6 elements)
    basin_aop, basin_ra, basin_ma = result.x
    line3 = constructTLE(guess_i, basin_ra, guess_e, basin_aop, basin_ma, guess_mm, noradid)

    ## curve_fit using all 6 orbital elements
    def curve_func(time_vector_temp, i, ra, e, aop, ma, mm):
            
        line3 = constructTLE(i*guess_i, ra*basin_ra, e*guess_e, aop*basin_aop, ma*basin_ma, mm*guess_mm, noradid)
        loc_x_array, loc_y_array = getSatXY("sat" ,new_line2, line3, time_vector)
           
        return list(loc_x_array) + list(loc_y_array)

    curve_fit_bounds = ((i_min/guess_i, ra_min/basin_ra, e_min/guess_e, aop_min/basin_aop, ma_min/basin_ma, mm_min/guess_mm),
                         (i_max/guess_i, ra_max/basin_ra, e_max/guess_e, aop_max/basin_aop, ma_max/basin_ma, mm_max/guess_mm))

    popt, pcov = curve_fit(curve_func, time_vector, list(x_array) + list(y_array), p0=(1,1,1,1,1,1), 
                        method="dogbox", diff_step=0.01, bounds=curve_fit_bounds)

    new_i, new_ra, new_e, new_aop, new_ma, new_mm = popt[0]*guess_i, popt[1]*basin_ra, popt[2]*guess_e, popt[3]*basin_aop, popt[4]*basin_ma, popt[5]*guess_mm

    line3 = constructTLE(new_i, new_ra, new_e, new_aop, new_ma, new_mm, noradid)
    fit_x, fit_y = getSatXY("sat" ,new_line2, line3, time_vector)
    return new_i, new_ra, new_e, new_aop, new_ma, new_mm, new_line2, line3, fit_x, fit_y




def main(args):

    ## load initial guess
    print("loading config file...", end="")

    with open(args.config) as yamlfile:
        cfg = yaml.load(yamlfile)
   
    global wcs, mwa, ts
    mwa = Topos("26.701276778 S", "116.670846137 E", elevation_m= 377.827)
    hdu = fits.open(args.wcsFile)
    wcs = WCS(hdu[0].header, naxis=2)
    imgSize = hdu[0].header["NAXIS1"]
    ts = load.timescale()
    print("done")

    ## do one round of orbit determination to find solution (without error sampling)
    new_i, new_ra, new_e, new_aop, new_ma, new_mm, new_line2, new_line3, fit_x, fit_y = orbitDetermination(cfg, bootstrap=False)

    ## boostrap to determine the errors
    bootstrap_e, bootstrap_i, bootstrap_ra = [], [], []
    bootstrap_ma, bootstrap_mm, bootstrap_aop = [], [], []

    for i in tqdm(range(args.niter)):
        i, ra, e, aop, ma, mm, _, _, _, _ = orbitDetermination(cfg, bootstrap=True)
        bootstrap_i.append(i)
        bootstrap_ra.append(ra)
        bootstrap_e.append(e)
        bootstrap_aop.append(aop)
        bootstrap_ma.append(ma)
        bootstrap_mm.append(mm)

    err_i, err_ra, err_e, err_aop, err_ma, err_mm = np.nanstd(bootstrap_i),np.nanstd(bootstrap_ra),np.nanstd(bootstrap_e), \
                                        np.nanstd(bootstrap_aop), np.nanstd(bootstrap_ma), np.nanstd(bootstrap_mm)


    ## calculate in-track and cross-track errors, and other parameters to write to file
    x_array, y_array, _ = readDetectionFile(args, sampler=False)

    def Slope(x1, y1, x2, y2):
        return np.arctan2(y2-y1,x2-x1)

    def getSlope(index, x_array, y_aray):
        try:
            x1 = x_array[index]
            y1 = y_array[index]
            x2 = x_array[index+1]
            y2 = y_array[index+1]
        except:
            x1 = x_array[index-1]
            y1 = y_array[index-1]
            x2 = x_array[index]
            y2 = y_array[index]
        
        return Slope(x1, y1, x2, y2)

    def getInTrackAndCrossTrack(index, fit_x, fit_y, x_array, y_array):
        deltaX  = -(x_array[index] - fit_x[index])
        deltaY  = -(y_array[index] - fit_y[index])
    
        theta = getSlope(index, x_array, y_array)
    
        inTrack = deltaX*np.cos(theta) + deltaY*np.sin(theta)
        crossTrack = deltaX*np.sin(theta) - deltaY*np.cos(theta)
    
        return inTrack, crossTrack

    in_track_array, cross_track_array = [], []
    for i in range(len(fit_x)):
        inTrack , offTrack = getInTrackAndCrossTrack(i, fit_x, fit_y, x_array, y_array)
        in_track_array.append(inTrack)
        cross_track_array.append(offTrack)

    inTrackRMS = np.sqrt(np.mean(np.square(in_track_array)))
    crossTrackRMS = np.sqrt(np.mean(np.square(cross_track_array)))

    observation =  list(fit_x) + list(fit_y)
    expected = x_array + y_array
    offset, _ = chisquare(observation, expected)
    n = 2*len(x_array)
    offset2 =  np.sqrt(1/n*np.sum((fit_x - x_array)**2 + (fit_y - y_array)**2))

    print("chi square of the fit {} rms of residue {}".format(np.round(offset, 4), offset2))
    print("in-track offset {} cross-track offset {}".format(inTrackRMS, crossTrackRMS)) 
    print("new tle line2 {}".format(new_line2))
    print("new tle line3 {}".format(new_line3))

    print("final solution")
    print("i {0} ra {1} e {2} aop {3} ma {4} mm {5}".format(np.round(new_i,4), np.round(new_ra,4), np.round(new_e,4), np.round(new_aop,4), np.round(new_ma,4), np.round(new_mm,4)))    
    print("and corresponding error")
    print("i {0} ra {1} e {2} aop {3} ma {4} mm {5}".format(err_i, err_ra, err_e, err_aop, err_ma, err_mm))    
    

    ## save data
    np.save("{}n{}fit_x.npy".format(args.obs, args.noradid), fit_x)
    np.save("{}n{}fit_y.npy".format(args.obs, args.noradid), fit_y)
    np.save("{}n{}x_array.npy".format(args.obs, args.noradid), x_array)
    np.save("{}n{}y_array.npy".format(args.obs, args.noradid), y_array)

    with open("../" + str(args.obs) + "n" + str(args.noradid) + ".txt", "w") as the_file:
        the_file.write("final solution\n")
        the_file.write("i {0} ra {1} e {2} aop {3} ma {4} mm {5}\n".format(np.round(new_i,4), np.round(new_ra,4), np.round(new_e,4), np.round(new_aop,4), np.round(new_ma,4), np.round(new_mm,4)))
        the_file.write("and corresponding error\n")
        the_file.write("i {0} ra {1} e {2} aop {3} ma {4} mm {5}\n".format(err_i, err_ra, err_e, err_aop, err_ma, err_mm))
        the_file.write("chi square of the fit {} rms of residue {}\n".format(np.round(offset, 4), offset2))
        the_file.write("intrack RMS {} crosstrack RMS {}\n".format(inTrackRMS, crossTrackRMS))
        the_file.write("new tle line2 {}\n".format(new_line2))
        the_file.write("new tle line3 {}".format(new_line3))



                        

    





if __name__ == "__main__":
    parser = ArgumentParser("orbit determination",description="performs orbit determination")
    parser.add_argument("--obs",required=True, type=int, help="the obs id")
    parser.add_argument("--noradid",required=True, type=int, help="the noradid of the satellite")
    parser.add_argument("--config", required=True, help="the config file that contains the intial guess")
    parser.add_argument("--wcsFile",required=True, help="any file that contians the relevant wcs object")
    parser.add_argument("--niter", default=1, type=int, help="the no. of bootstrap iterations")
    args = parser.parse_args()

    global noradid
    noradid = args.noradid

    main(args)
